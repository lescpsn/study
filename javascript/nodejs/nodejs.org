#+TITLE:  NODE.JS入门
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../style/my-org-worg.css" />

* node.js概览
#+BEGIN_EXAMPLE
javascript脚本性语言
异步I/O
事件驱动
#+END_EXAMPLE


* 向node.js发问
** Question 1
+ Q：如何运行第一个node.js程序？
+ A:
#+BEGIN_EXAMPLE
1 官网https://nodejs.org/en/下载最新安装包

2 安装node.js，选择好合适的安装目录，一路回车法

3 安装后cmd命令行中用node -v,npm -v查看两个重要的命令是否安装成功
  node是node.js的主程序，npm是node.js管理包的工具

4 编写第一个001.js程序（名字任意，一般以js作为后缀，理论上讲脚本程序后缀名js也是可以任意的）

5 node 001.js 直接运行程序
#+END_EXAMPLE


#+BEGIN_EXAMPLE
// 001.js

console.log("Welcome To IOTA!");
#+END_EXAMPLE

#+BEGIN_EXAMPLE
c/P/l/s/j/nodejs/example:master*? λ node 001.js 
Welcome To IOTA!
c/P/l/s/j/nodejs/example:master*? λ 
#+END_EXAMPLE


** Question 2
+ Q：如何定义变量呢？
+ A:
#+BEGIN_EXAMPLE
1 程序想写活，可能是需要变量来动态获取和保存各个阶段的不同的值

2 脚本语言是弱类型语言，变量是没有类型的

3 var 关键字定义变量

4 每一个问题只是一个突破口，以此向下挖掘，发散到不能发散为止

比如：可以联想到注释如何写？既然是脚本语言为何要var，不要var又如何呢？？
     字符串型"",'',``赋值又有什么区别吗？只是声明一个变量，不赋值，那它初始值又是什么呢？
     既然是没有类型，那"123"==123吗？"abc"可以直接相加123吗？已经保存已知类型的变量，
     中途是否可以保存其它类型值。下面简单测试程序中出现的undefined，NaN是什么意思？
#+END_EXAMPLE

#+BEGIN_EXAMPLE
// 002.js


// 如何注释
// 脚本语言是弱类型语言，变量是没有类型的
var s_a1 = "Welcome To Iota!:1"; // 字符串 "", '', `` 区别
var s_a2 = 'Welcome To Iota!:2';
var s_a3 = `Welcome To Iota!:3`;
console.log("-------------------------------------");
console.log("s_a1 is: ", s_a1);
console.log("s_a2 is: ", s_a2);
console.log("s_a3 is: ", s_a3);
console.log("-------------------------------------");

var s_a4; // 只是声明
console.log("s_a4 is: ", s_a4);
console.log("-------------------------------------");

var f_a1 = 123.4; // 存储浮点数
var i_a1 = 123; // 存储整数
console.log("f_a1 is: ", f_a1);
console.log("i_a1 is: ", i_a1);
console.log("s_a1 + i_a1 is: ", s_a1 + i_a1); // 字符串，整数相加
console.log("f_a1 / i_a1 is: ", f_a1 / i_a1); // 浮点数除以整数
console.log("f_a1 / s_a1 is: ", f_a1 / s_a1); // 浮点数除以字符串
console.log("-------------------------------------");

f_a1 = s_a1; // 之前保存字符串的变量也可以赋值给保存浮点型的变量
console.log("f_a1 is: ", f_a1);
console.log("-------------------------------------");

i_a21 = 234; // 不用var關鍵字
console.log("i_a21(not use var) is: ", i_a21);
console.log("-------------------------------------");

var ch_a1 = "A";
var ch_a2 = 'B';
var ch_a3 = `C`;
console.log("ch_a1 is: ", ch_a1);
console.log("ch_a2 is: ", ch_a2);
console.log("ch_a3 is: ", ch_a3);

console.log("-------------------------------------t101: 测试0");
//var ch_b1 = '123';
//var int_b1 = 123;
var ch_b1 = '0';
var int_b1 = 0;

if (int_b1 == ch_b1) { // 可以打印出來 全部转换成数字比较
    console.log("int_b1 == ch_b1?", int_b1 == ch_b1);
}

if (ch_b1 == int_b1) { // 可以打印出來 全部转换成数字比较
    console.log("ch_b1 == int_b1?", ch_b1 == int_b1);
}

if (ch_b1) { // 可以打印出來
    console.log("变量ch_b1保存的字符'0'");
}

if (int_b1) { // 不能打印出來
    console.log("变量int_b1保存的数值0");
}
console.log("-------------------------------------t102: 测试0");

if (0) { // 不能打印出來
    console.log("字面量數值0");
}

if ('0') {
    console.log("字面量字符'0'");
}
console.log("-------------------------------------t103: 测试0");
if (0 == '0') { // 可以打印出來
    console.log("字面量數值0=='0'");
}

if (1 == '1') { // 可以打印出來
    console.log("字面量數值1=='1'");
}
console.log("-------------------------------------");

#+END_EXAMPLE

#+BEGIN_EXAMPLE
c/P/l/s/j/nodejs/example:master*? λ node.exe 002.js 
-------------------------------------
s_a1 is:  Welcome To Iota!:1
s_a2 is:  Welcome To Iota!:2
s_a3 is:  Welcome To Iota!:3
-------------------------------------
s_a4 is:  undefined
-------------------------------------
f_a1 is:  123.4
i_a1 is:  123
s_a1 + i_a1 is:  Welcome To Iota!:1123
f_a1 / i_a1 is:  1.0032520325203254
f_a1 / s_a1 is:  NaN
-------------------------------------
f_a1 is:  Welcome To Iota!:1
-------------------------------------
i_a21(not use var) is:  234
-------------------------------------
ch_a1 is:  A
ch_a2 is:  B
ch_a3 is:  C
-------------------------------------t101: 测试0
int_b1 == ch_b1? true
ch_b1 == int_b1? true
变量ch_b1保存的字符'0'
-------------------------------------t102: 测试0
字面量字符'0'
-------------------------------------t103: 测试0
字面量數值0=='0'
字面量數值1=='1'
-------------------------------------
c/P/l/s/j/nodejs/example:master*? λ 
#+END_EXAMPLE


** Question 3
+ Q：如何定义数组呢？
+ A:
#+BEGIN_EXAMPLE
1 var arr_a1 = []; // 直接一个方括号就ok了

2 弱类型语言，数组元素类型要一致吗？(如果不一致，就不是传统意义上的数组，只是一个序列)

3 如果不一致，那就应该可以数组中嵌套数组（因为根本无类型要求吗）

4 数组的长度呢？

5 有了数组长度，可以迭代数组？是不是只能(i=0;i<len;i++)呢，有没有其它更好的方式呢？

6 如何获得数组中的元素呢？

7 如何修改数组中的元素呢？

8 如何删除数组中的元素呢？

9 是否可以追加新的元素到已有数组中呢？

10 数组与数组之间有没有什么操作方法，比如链接，拷贝？

11 数组与数组如果能连接，链接完还是数组吗？

#+END_EXAMPLE
#+BEGIN_EXAMPLE
var arr_a1 = ['a', 'b', 'c']; // 同一个类型
var arr_a2 = ['d', 'e', 1, "124"]; // 不同类型混合
var arr_a3 = ['f', 'eg', 1, "124", [1.23, "hij"]]; // 既然可以不同类型，当然可以支持嵌套

console.log("-------------------------------------");
console.log("arr_a1 = ", arr_a1);
console.log("arr_a2 = ", arr_a2);
console.log("arr_a3 = ", arr_a3);

console.log("-------------------------------------");
len_arr_a3 = arr_a3.length; // 数组长度
for (i = 0; i < len_arr_a3; i++) { //  如何迭代
    console.log(arr_a3[i]);
}

console.log("-------------------------------------");
var arr_a4 = arr_a2 + arr_a3;  // 连接两个数组
console.log("arr_a4 = arr_a2 + arr_a3: ", arr_a4);
console.log("arr_a4.length = ", arr_a4.length);
console.log("-------------------------------------");
#+END_EXAMPLE

#+BEGIN_EXAMPLE
c/P/l/s/j/nodejs/example:master*? λ node.exe 003.js 
-------------------------------------
arr_a1 =  [ 'a', 'b', 'c' ]
arr_a2 =  [ 'd', 'e', 1, '124' ]
arr_a3 =  [ 'f', 'eg', 1, '124', [ 1.23, 'hij' ] ]
-------------------------------------
f
eg
1
124
[ 1.23, 'hij' ]
-------------------------------------
arr_a4 = arr_a2 + arr_a3:  d,e,1,124f,eg,1,124,1.23,hij
arr_a4.length =  28
-------------------------------------
c/P/l/s/j/nodejs/example:master*? λ 
#+END_EXAMPLE

** Question 4
+ Q:
+ A:



** Question 5
+ Q:
+ A:

** Question 6
+ Q:
+ A:






** Question 7
+ Q:
+ A:


** Question 8
+ Q:
+ A:


** Question 9
+ Q:
+ A:


** Question 10
+ Q:
+ A:
